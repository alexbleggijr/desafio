@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use '../variables/colors.variables';

@function custom-properties-infix($luminosity-length) {
  @return if($luminosity-length == 1, '', '-');
}

/// generates Desafio color CSS custom properties.
/// @param $category brand | neutral | feedback
/// @param $default-variation define a cor default se existir
@mixin generate-custom-properties($map, $category, $default-variation: null) {
  $hue: map.get($map, hue);
  $saturation: map.get($map, saturation);
  $luminosity: map.get($map, luminosity);
  $luminosity-length: list.length($luminosity);

  /// default color
  @if $default-variation != null {
    /// @output --ds-color-brand: var(--ds-color-brand-3);
    --ds-color-#{$category}: var(--ds-color-#{$category}-#{$default-variation});
  }

  /// color variations
  @if $luminosity-length != 1 {
    @each $luminosity-key, $luminosity-value in $luminosity {
      /// @output --ds-color-brand-3: 188, 80%, 40%;
      --ds-color-#{$category}-#{$luminosity-key}: #{$hue}, #{$saturation * 1%},
        #{$luminosity-value * 1%};
    }
  } @else {
    /// @output --ds-color-attention: 44, 80%, 65%;
    --ds-color-#{$category}: #{$hue}, #{$saturation * 1%}, #{$luminosity * 1%};
  }
}

/// generates Desafio color CSS classes.
/// if '$contrast-fixed-variation' is not set, it will divide luminosity variations in two and apply 'neutral-10' contrast to the lower variations and 'neutral-1' contrast to upper variations.
/// if '$contrast-fixed-variation' is set, it will apply the '--ds-color-contrast-fixed' CSS custom property as contrast to the luminosity variation set in the parameter.
/// @param $category brand | neutral | feedback
/// @param $contrast-fixed-variation the luminosity variation value so that '--ds-color-contrast-fixed' CSS custom property is set as contrast
@mixin generate-classes($map, $category, $contrast-fixed-variation: null) {
  $luminosity: map.get($map, luminosity);
  $luminosity-length: list.length($luminosity);
  $contrast-break: math.ceil(math.div($luminosity-length, 2));

  /// fixed contrast variation
  @if $contrast-fixed-variation != null {
    /// @output
    /// .ds-color-brand,
    /// [color='brand'] {
    ///   --ds-color-base: var(--ds-color-brand) !important;
    ///   --ds-color-contrast: var(--ds-color-contrast-fixed) !important;
    /// }
    .ds-color-#{$category},
    [color='#{$category}'] {
      --ds-color-base: var(--ds-color-#{$category}) !important;
      --ds-color-contrast: var(--ds-color-contrast-fixed) !important;
    }
  }

  /// color contrast variations
  $iteration: 1;
  @if $luminosity-length != 1 {
    @each $luminosity-key, $luminosity-value in $luminosity {
      .ds-color-#{$category}-#{$luminosity-key},
      [color='#{$category}-#{$luminosity-key}'] {
        --ds-color-base: var(
          --ds-color-#{$category}-#{$luminosity-key}
        ) !important;

        @if $iteration <= $contrast-break {
          @if $luminosity-key == $contrast-fixed-variation {
            /// @output
            /// .ds-color-brand-#{$contrast-fixed-variation},
            /// [color='brand-#{$contrast-fixed-variation}'] {
            ///   --ds-color-base: var(--ds-color-brand-#{$contrast-fixed-variation}) !important;
            ///   --ds-color-contrast: var(--ds-color-contrast-fixed) !important;
            /// }
            --ds-color-contrast: var(--ds-color-contrast-fixed) !important;
          } @else {
            /// @output
            /// .ds-color-neutral-5,
            /// [color='neutral-3'] {
            ///   --ds-color-base: var(--ds-color-neutral-5) !important;
            ///   --ds-color-contrast: var(--ds-color-neutral-10) !important;
            /// }
            --ds-color-contrast: var(--ds-color-neutral-10) !important;
          }
        } @else {
          @if $luminosity-key == $contrast-fixed-variation {
            /// @output
            /// .ds-color-brand-#{$contrast-fixed-variation},
            /// [color='brand-#{$contrast-fixed-variation}'] {
            ///   --ds-color-base: var(--ds-color-brand-#{$contrast-fixed-variation}) !important;
            ///   --ds-color-contrast: var(--ds-color-contrast-fixed) !important;
            /// }
            --ds-color-contrast: var(--ds-color-contrast-fixed) !important;
          } @else {
            /// @output
            /// .ds-color-neutral-6,
            /// [color='neutral-6'] {
            ///   --ds-color-base: var(--ds-color-neutral-) !important;
            ///   --ds-color-contrast: var(--ds-color-neutral-10) !important;
            /// }
            --ds-color-contrast: var(--ds-color-neutral-1) !important;
          }
        }
      }

      $iteration: $iteration + 1;
    }
  } @else {
    /// @output
    /// .ds-color-attention,
    /// [color='attention'] {
    ///   --ds-color-base: var(--ds-color-attention) !important;
    ///   --ds-color-contrast: var(--ds-color-neutral-1) !important;
    /// }
    .ds-color-#{$category},
    [color='#{$category}'] {
      --ds-color-base: var(--ds-color-#{$category}) !important;
      --ds-color-contrast: var(--ds-color-neutral-1) !important;
    }
  }
}
