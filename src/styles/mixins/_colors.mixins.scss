@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use '../variables/colors.variables';

/// @param $mode fixed | lower | upper
@function get-dynamic-custom-properties($hue, $saturation, $luminosity, $mode) {
  @return calc(var(--ds-hue, #{$hue}) + var(--ds-hue-factor, 0)),
    calc(
      var(--ds-saturation, #{$saturation * 1%}) +
        var(--ds-saturation-factor, 0%)
    ),
    calc(
      var(--ds-luminosity, #{$luminosity * 1%}) +
        var(--ds-luminosity-factor-#{$mode}, 0%)
    );
}

/// generates Desafio CSS csutom properties.
/// if '$contrast-fixed-variation' is not set, it will divide luminosity variations in two and apply '--ds-luminosity-factor-lower' contrast to the lower variations and '--ds-luminosity-factor-upper' contrast to upper variations.
/// if '$contrast-fixed-variation' is set, it will apply the '--ds-luminosity-factor-fixed' CSS custom property as contrast to the luminosity variation set in the parameter.
/// @param $category brand | neutral | feedback | string
/// @param $contrast-fixed-variation the luminosity variation value so that '--ds-luminosity-factor-fixed' CSS custom property is set as contrast
@mixin generate-custom-properties(
  $map,
  $category,
  $contrast-fixed-variation: null
) {
  $hue: map.get($map, hue);
  $saturation: map.get($map, saturation);
  $luminosity: map.get($map, luminosity);
  $luminosity-length: list.length($luminosity);
  $contrast-break: math.ceil(math.div($luminosity-length, 2));

  /// fixed contrast variation
  @if $contrast-fixed-variation != null {
    $luminosity-fixed: map.get($luminosity, $contrast-fixed-variation);

    --ds-color-#{$category}: #{get-dynamic-custom-properties(
        $hue,
        $saturation,
        $luminosity-fixed,
        fixed
      )};
  }

  /// color contrast variations
  $iteration: 1;
  /// color has more than one variation
  @if $luminosity-length != 1 {
    @each $luminosity-key, $luminosity-value in $luminosity {
      /// lower contrast variations
      @if $iteration <= $contrast-break {
        // fixed contrast
        @if $luminosity-key == $contrast-fixed-variation {
          --ds-color-#{$category}-#{$luminosity-key}: #{get-dynamic-custom-properties(
              $hue,
              $saturation,
              $luminosity-value,
              fixed
            )};

          /// lower contrast variations
        } @else {
          --ds-color-#{$category}-#{$luminosity-key}: #{get-dynamic-custom-properties(
              $hue,
              $saturation,
              $luminosity-value,
              lower
            )};
        }
        // upper contrast variations
      } @else {
        // fixed contrast
        @if $luminosity-key == $contrast-fixed-variation {
          --ds-color-#{$category}-#{$luminosity-key}: #{get-dynamic-custom-properties(
              $hue,
              $saturation,
              $luminosity-value,
              fixed
            )};

          /// upper contrast variations
        } @else {
          --ds-color-#{$category}-#{$luminosity-key}: #{get-dynamic-custom-properties(
              $hue,
              $saturation,
              $luminosity-value,
              upper
            )};
        }
      }
      $iteration: $iteration + 1;
    }
    /// color has one variation
  } @else {
    --ds-color-#{$category}: #{get-dynamic-custom-properties(
        $hue,
        $saturation,
        $luminosity,
        todo
      )};
  }
}

/// generates Desafio color CSS classes.
/// if '$contrast-fixed-variation' is not set, it will divide luminosity variations in two and apply 'neutral-10' contrast to the lower variations and 'neutral-1' contrast to upper variations.
/// if '$contrast-fixed-variation' is set, it will apply the '--ds-color-contrast-fixed' CSS custom property as contrast to the luminosity variation set in the parameter.
/// @param $category brand | neutral | feedback | string
/// @param $contrast-fixed-variation the luminosity variation value so that '--ds-color-contrast-fixed' CSS custom property is set as contrast
@mixin generate-classes($map, $category, $contrast-fixed-variation: null) {
  $luminosity: map.get($map, luminosity);
  $luminosity-length: list.length($luminosity);
  $contrast-break: math.ceil(math.div($luminosity-length, 2));

  /// fixed contrast variation
  @if $contrast-fixed-variation != null {
    /// @output
    /// .ds-color-brand,
    /// [color='brand'] {
    ///   --ds-color-base: var(--ds-color-brand);
    ///   --ds-color-contrast: var(--ds-color-contrast-fixed);
    /// }
    .ds-color-#{$category},
    [color='#{$category}'] {
      --ds-color-base: var(--ds-color-#{$category});
      --ds-color-contrast: var(--ds-color-contrast-fixed);
    }
  }

  /// color contrast variations
  $iteration: 1;
  /// color has more than one variation
  @if $luminosity-length != 1 {
    @each $luminosity-key, $luminosity-value in $luminosity {
      .ds-color-#{$category}-#{$luminosity-key},
      [color='#{$category}-#{$luminosity-key}'] {
        --ds-color-base: var(--ds-color-#{$category}-#{$luminosity-key});

        /// lower contrast variations
        @if $iteration <= $contrast-break {
          // fixed contrast
          @if $luminosity-key == $contrast-fixed-variation {
            /// @output
            /// .ds-color-brand-#{$contrast-fixed-variation},
            /// [color='brand-#{$contrast-fixed-variation}'] {
            ///   --ds-color-base: var(--ds-color-brand-#{$contrast-fixed-variation});
            ///   --ds-color-contrast: var(--ds-color-contrast-fixed);
            /// }
            --ds-color-contrast: var(--ds-color-contrast-fixed);
            /// lower contrast variations
          } @else {
            /// @output
            /// .ds-color-neutral-5,
            /// [color='neutral-3'] {
            ///   --ds-color-base: var(--ds-color-neutral-5);
            ///   --ds-color-contrast: var(--ds-color-neutral-10);
            /// }
            --ds-color-contrast: var(--ds-color-neutral-10);
          }
          // upper contrast variations
        } @else {
          // fixed contrast
          @if $luminosity-key == $contrast-fixed-variation {
            /// @output
            /// .ds-color-brand-#{$contrast-fixed-variation},
            /// [color='brand-#{$contrast-fixed-variation}'] {
            ///   --ds-color-base: var(--ds-color-brand-#{$contrast-fixed-variation});
            ///   --ds-color-contrast: var(--ds-color-contrast-fixed);
            /// }
            --ds-color-contrast: var(--ds-color-contrast-fixed);
            /// upper contrast variations
          } @else {
            /// @output
            /// .ds-color-neutral-6,
            /// [color='neutral-6'] {
            ///   --ds-color-base: var(--ds-color-neutral-6);
            ///   --ds-color-contrast: var(--ds-color-neutral-10);
            /// }
            --ds-color-contrast: var(--ds-color-neutral-1);
          }
        }
      }
      $iteration: $iteration + 1;
    }
    /// color has one variation
  } @else {
    /// @output
    /// .ds-color-attention,
    /// [color='attention'] {
    ///   --ds-color-base: var(--ds-color-attention);
    ///   --ds-color-contrast: var(--ds-color-neutral-1);
    /// }
    .ds-color-#{$category},
    [color='#{$category}'] {
      --ds-color-base: var(--ds-color-#{$category});
      --ds-color-contrast: var(--ds-color-neutral-1);
    }
  }
}
